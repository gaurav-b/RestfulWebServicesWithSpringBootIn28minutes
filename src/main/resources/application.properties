server.port=8081
logging.level.org.springframework=info
management.endpoints.web.exposure.include=*

# H2
#spring.datasource.url=jdbc:h2:mem:testdb

spring.jpa.defer-datasource-initialization=true

# following details are regarding mysql instance running as the docker container using this command
#
# docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=social-media-user 
#--env MYSQL_PASSWORD=dummypassword --env MYSQL_DATABASE=social-media-database 
#--name mysql --publish 3306:3306 mysql:8-oracle
#
# Keep above command as one liner while using in docker
# use following command to connect with mysql running as docker container
#
# docker exec -it mysql mysql -usocial-media-user -p
#
# after that put your password there and get connect with mysql
#
# OR
#
# connect with this mysql instance using mysql workbench, but in that case if you are using 
# docker toolbox in windows then you need to get the ip of the docker machine using (docker-machine ip)
# and instead of localhost, use that ip in connection string
#
# now if you stop the container, your database with data still is there
# you just need to restart the same container and you can check prev containers with this command
# 
# docker container ls -a
# you have named the container as mysql so you run that container and reconnect with it  
spring.datasource.url=jdbc:mysql://192.168.99.100:3306/social-media-database
spring.datasource.username=social-media-user
spring.datasource.password=dummypassword
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

spring.jpa.show-sql=true

# spring security config
spring.security.user.name=username
spring.security.user.password=password
